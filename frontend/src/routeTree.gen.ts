/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MapImport } from './routes/map'
import { Route as IndexImport } from './routes/index'
import { Route as DevicesIndexImport } from './routes/devices/index'
import { Route as DevicesDeviceIdImport } from './routes/devices/$deviceId'
import { Route as DeviceDeviceFilesImport } from './routes/device/deviceFiles'
import { Route as DeviceDeviceDashboardImport } from './routes/device/deviceDashboard'
import { Route as DevicesDeviceIdIndexImport } from './routes/devices/$deviceId/index'

// Create/Update Routes

const MapRoute = MapImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DevicesIndexRoute = DevicesIndexImport.update({
  id: '/devices/',
  path: '/devices/',
  getParentRoute: () => rootRoute,
} as any)

const DevicesDeviceIdRoute = DevicesDeviceIdImport.update({
  id: '/devices/$deviceId',
  path: '/devices/$deviceId',
  getParentRoute: () => rootRoute,
} as any)

const DeviceDeviceFilesRoute = DeviceDeviceFilesImport.update({
  id: '/device/deviceFiles',
  path: '/device/deviceFiles',
  getParentRoute: () => rootRoute,
} as any)

const DeviceDeviceDashboardRoute = DeviceDeviceDashboardImport.update({
  id: '/device/deviceDashboard',
  path: '/device/deviceDashboard',
  getParentRoute: () => rootRoute,
} as any)

const DevicesDeviceIdIndexRoute = DevicesDeviceIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DevicesDeviceIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapImport
      parentRoute: typeof rootRoute
    }
    '/device/deviceDashboard': {
      id: '/device/deviceDashboard'
      path: '/device/deviceDashboard'
      fullPath: '/device/deviceDashboard'
      preLoaderRoute: typeof DeviceDeviceDashboardImport
      parentRoute: typeof rootRoute
    }
    '/device/deviceFiles': {
      id: '/device/deviceFiles'
      path: '/device/deviceFiles'
      fullPath: '/device/deviceFiles'
      preLoaderRoute: typeof DeviceDeviceFilesImport
      parentRoute: typeof rootRoute
    }
    '/devices/$deviceId': {
      id: '/devices/$deviceId'
      path: '/devices/$deviceId'
      fullPath: '/devices/$deviceId'
      preLoaderRoute: typeof DevicesDeviceIdImport
      parentRoute: typeof rootRoute
    }
    '/devices/': {
      id: '/devices/'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof DevicesIndexImport
      parentRoute: typeof rootRoute
    }
    '/devices/$deviceId/': {
      id: '/devices/$deviceId/'
      path: '/'
      fullPath: '/devices/$deviceId/'
      preLoaderRoute: typeof DevicesDeviceIdIndexImport
      parentRoute: typeof DevicesDeviceIdImport
    }
  }
}

// Create and export the route tree

interface DevicesDeviceIdRouteChildren {
  DevicesDeviceIdIndexRoute: typeof DevicesDeviceIdIndexRoute
}

const DevicesDeviceIdRouteChildren: DevicesDeviceIdRouteChildren = {
  DevicesDeviceIdIndexRoute: DevicesDeviceIdIndexRoute,
}

const DevicesDeviceIdRouteWithChildren = DevicesDeviceIdRoute._addFileChildren(
  DevicesDeviceIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/map': typeof MapRoute
  '/device/deviceDashboard': typeof DeviceDeviceDashboardRoute
  '/device/deviceFiles': typeof DeviceDeviceFilesRoute
  '/devices/$deviceId': typeof DevicesDeviceIdRouteWithChildren
  '/devices': typeof DevicesIndexRoute
  '/devices/$deviceId/': typeof DevicesDeviceIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/map': typeof MapRoute
  '/device/deviceDashboard': typeof DeviceDeviceDashboardRoute
  '/device/deviceFiles': typeof DeviceDeviceFilesRoute
  '/devices': typeof DevicesIndexRoute
  '/devices/$deviceId': typeof DevicesDeviceIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/map': typeof MapRoute
  '/device/deviceDashboard': typeof DeviceDeviceDashboardRoute
  '/device/deviceFiles': typeof DeviceDeviceFilesRoute
  '/devices/$deviceId': typeof DevicesDeviceIdRouteWithChildren
  '/devices/': typeof DevicesIndexRoute
  '/devices/$deviceId/': typeof DevicesDeviceIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/map'
    | '/device/deviceDashboard'
    | '/device/deviceFiles'
    | '/devices/$deviceId'
    | '/devices'
    | '/devices/$deviceId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/map'
    | '/device/deviceDashboard'
    | '/device/deviceFiles'
    | '/devices'
    | '/devices/$deviceId'
  id:
    | '__root__'
    | '/'
    | '/map'
    | '/device/deviceDashboard'
    | '/device/deviceFiles'
    | '/devices/$deviceId'
    | '/devices/'
    | '/devices/$deviceId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MapRoute: typeof MapRoute
  DeviceDeviceDashboardRoute: typeof DeviceDeviceDashboardRoute
  DeviceDeviceFilesRoute: typeof DeviceDeviceFilesRoute
  DevicesDeviceIdRoute: typeof DevicesDeviceIdRouteWithChildren
  DevicesIndexRoute: typeof DevicesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MapRoute: MapRoute,
  DeviceDeviceDashboardRoute: DeviceDeviceDashboardRoute,
  DeviceDeviceFilesRoute: DeviceDeviceFilesRoute,
  DevicesDeviceIdRoute: DevicesDeviceIdRouteWithChildren,
  DevicesIndexRoute: DevicesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/map",
        "/device/deviceDashboard",
        "/device/deviceFiles",
        "/devices/$deviceId",
        "/devices/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/map": {
      "filePath": "map.tsx"
    },
    "/device/deviceDashboard": {
      "filePath": "device/deviceDashboard.tsx"
    },
    "/device/deviceFiles": {
      "filePath": "device/deviceFiles.tsx"
    },
    "/devices/$deviceId": {
      "filePath": "devices/$deviceId.tsx",
      "children": [
        "/devices/$deviceId/"
      ]
    },
    "/devices/": {
      "filePath": "devices/index.tsx"
    },
    "/devices/$deviceId/": {
      "filePath": "devices/$deviceId/index.tsx",
      "parent": "/devices/$deviceId"
    }
  }
}
ROUTE_MANIFEST_END */
