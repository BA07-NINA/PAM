/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DevicesImport } from './routes/devices'
import { Route as DeviceFilesImport } from './routes/deviceFiles'
import { Route as DeviceDashboardImport } from './routes/deviceDashboard'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const DevicesRoute = DevicesImport.update({
  id: '/devices',
  path: '/devices',
  getParentRoute: () => rootRoute,
} as any)

const DeviceFilesRoute = DeviceFilesImport.update({
  id: '/deviceFiles',
  path: '/deviceFiles',
  getParentRoute: () => rootRoute,
} as any)

const DeviceDashboardRoute = DeviceDashboardImport.update({
  id: '/deviceDashboard',
  path: '/deviceDashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/deviceDashboard': {
      id: '/deviceDashboard'
      path: '/deviceDashboard'
      fullPath: '/deviceDashboard'
      preLoaderRoute: typeof DeviceDashboardImport
      parentRoute: typeof rootRoute
    }
    '/deviceFiles': {
      id: '/deviceFiles'
      path: '/deviceFiles'
      fullPath: '/deviceFiles'
      preLoaderRoute: typeof DeviceFilesImport
      parentRoute: typeof rootRoute
    }
    '/devices': {
      id: '/devices'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof DevicesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/deviceDashboard': typeof DeviceDashboardRoute
  '/deviceFiles': typeof DeviceFilesRoute
  '/devices': typeof DevicesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/deviceDashboard': typeof DeviceDashboardRoute
  '/deviceFiles': typeof DeviceFilesRoute
  '/devices': typeof DevicesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/deviceDashboard': typeof DeviceDashboardRoute
  '/deviceFiles': typeof DeviceFilesRoute
  '/devices': typeof DevicesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/deviceDashboard' | '/deviceFiles' | '/devices'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/deviceDashboard' | '/deviceFiles' | '/devices'
  id: '__root__' | '/' | '/deviceDashboard' | '/deviceFiles' | '/devices'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DeviceDashboardRoute: typeof DeviceDashboardRoute
  DeviceFilesRoute: typeof DeviceFilesRoute
  DevicesRoute: typeof DevicesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DeviceDashboardRoute: DeviceDashboardRoute,
  DeviceFilesRoute: DeviceFilesRoute,
  DevicesRoute: DevicesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/deviceDashboard",
        "/deviceFiles",
        "/devices"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/deviceDashboard": {
      "filePath": "deviceDashboard.tsx"
    },
    "/deviceFiles": {
      "filePath": "deviceFiles.tsx"
    },
    "/devices": {
      "filePath": "devices.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
